import os
import json
import wsgi
import pytest
from mock_database import MockDatabase

os.environ['FLASK_ENV'] = 'Unit_Test'
os.environ['CLIENT_URL'] = 'nr-bcwat.unit-tests'

@pytest.fixture
def app():
    app = wsgi.app
    app.db = MockDatabase()
    return app

@pytest.fixture()
def client(app):
    return app.test_client()

# Input Provided via sample front end fixture
@pytest.fixture
def streamflow_input_fixture():
    path = os.path.join(os.path.dirname(__file__), 'fixtures/streamflow', 'fullStreamflow.json')
    with open(path, 'r') as f:
        return json.load(f)

@pytest.fixture
def monthly_streamflow_output_fixture():
    # Values Generated by Existing Front End Logic
    expected = {
        1: {
            "max": 30.6,
            "p75": 4.84,
            "median": 3.4,
            "p25": 1.4,
            "min": 0.44
        },
        2: {
          "max": 23.2,
          "p75": 4.36,
          "median": 3.37,
          "p25": 1.33,
          "min": 0.5
        },
        3: {
          "max": 14.8,
          "p75": 4.45,
          "median": 3.46,
          "p25": 1.4925,
          "min": 0.549
        },
        4: {
          "max": 53,
          "p75": 7.05,
          "median": 4.25,
          "p25": 1.68,
          "min": 0.261
        },
        5: {
          "max": 143,
          "p75": 34.8,
          "median": 19.8,
          "p25": 8.21,
          "min": 0.913
        },
        6: {
          "max": 211,
          "p75": 63.4,
          "median": 43.5,
          "p25": 26.4,
          "min": 1.15
        },
        7: {
          "max": 170,
          "p75": 48.1,
          "median": 31.5,
          "p25": 12.3,
          "min": 0.777
        },
        8: {
          "max": 98.8,
          "p75": 21.95,
          "median": 3.72,
          "p25": 2.145,
          "min": 0.515
        },
        9: {
          "max": 76.3,
          "p75": 11.6,
          "median": 2.23,
          "p25": 1.58,
          "min": 0.314
        },
        10: {
          "max": 48.7,
          "p75": 8.59,
          "median": 2.05,
          "p25": 1.41,
          "min": 0.377
        },
        11: {
          "max": 61.4,
          "p75": 7.36,
          "median": 1.94,
          "p25": 1.4,
          "min": 0.456
        },
        12: {
          "max": 72.1,
          "p75": 6.34,
          "median": 3.4,
          "p25": 1.46,
          "min": 0.17
        }
    }
    return expected

@pytest.fixture
def total_runoff_output_fixture():
    # Values Generated by Existing Front End Logic
    path = os.path.join(os.path.dirname(__file__), 'fixtures/streamflow', 'totalRunoff.json')
    with open(path, 'r') as f:
        return json.load(f)

@pytest.fixture
def flow_exceedance_output_fixture():
    # Values Generated by Existing Front End Logic
    path = os.path.join(os.path.dirname(__file__), 'fixtures/streamflow', 'flowExceedance.json')
    with open(path, 'r') as f:
        return json.load(f)

