executor: KubernetesExecutor

# Requires Existing Storage Class Created (handled by FLUX CD - INFRA)
logs:
  persistence:
    enabled: true
    storageClassName: netapp-file-standard
    size: 8Gi

# We are manaully creating a fernet-key before initializing Airflow.
fernetKeySecretName: bcwat-airflow-fernet-key

# Airflow database config
# Requires Airflow-metadata secret to have been created, pointing to the database handling airflow metadata info
data:
  metadataSecretName: bcwat-airflow-metadata
  resultBackendSecretName: bcwat-airflow-metadata

images:
  airflow:
    repository: ghcr.io/bcgov/nr-bcwat/airflow
    tag: latest
    pullPolicy: Always

webserver:
  waitForMigrations:
    enabled: false
  securityContext:
    runAsUser: 1018340000
    fsGroup: 1018340000      # a value within the allowed fsGroup range (1018340000/10000)

scheduler:
  waitForMigrations:
    enabled: false
  securityContext:
    runAsUser: 1018340000
    fsGroup: 1018340000      # a value within the allowed fsGroup range (1018340000/10000)

migrateDatabaseJob:
  securityContext:
    runAsUser: 1018340000
    fsGroup: 1018340000      # a value within the allowed fsGroup range (1018340000/10000)
  ttlSecondsAfterFinished: 180

createUserJob:
  securityContext:
    runAsUser: 1018340000
    fsGroup: 1018340000      # a value within the allowed fsGroup range (1018340000/10000)
  ttlSecondsAfterFinished: 180

redis:
  enabled: false

triggerer:
  persistence:
    enabled: false
  waitForMigrations:
    enabled: false
  securityContext:
    runAsUser: 1018340000
    fsGroup: 1018340000      # a value within the allowed fsGroup range (1018340000/10000)

postgresql:
  enabled: false

flower:
  enabled: false

statsd:
  enabled: false

dags:
  persistence:
    enabled: false

extraConfigMaps:
  airflow-pod-templates:
    simple_task_template.yaml: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: airflow-worker-simple
        labels:
          tier: airflow
          component: worker
          release: airflow
        annotations:
          cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
      spec:
        ttlSecondsAfterFinished: 300
        initContainers: []
        containers:
          - name: base
            image: apache/airflow:2.10.5
            imagePullPolicy: IfNotPresent
            env:
              - name: AIRFLOW__CORE__EXECUTOR
                value: KubernetesExecutor
              - name: AIRFLOW__CORE__FERNET_KEY
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-fernet-key
                    key: fernet-key
              - name: AIRFLOW_HOME
                value: /opt/airflow
              - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-metadata
                    key: connection
              - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-metadata
                    key: connection
              - name: AIRFLOW_CONN_AIRFLOW_DB
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-metadata
                    key: connection
              - name: AIRFLOW__WEBSERVER__SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    name: airflow-webserver-secret-key
                    key: webserver-secret-key
              - name: AIRFLOW__KUBERNETES__LOGS_SERVICE_HOST
                value: airflow-webserver
              - name: AIRFLOW__KUBERNETES__LOGS_SERVICE_PORT
                value: "8793"
              - name: FLOWWORKS_USER
                valueFrom:
                  secretKeyRef:
                    name: bcwat-flowworks-credentials
                    key: BCWAT_FLOWWORKS_USERNAME
              - name: FLOWWORKS_PASS
                valueFrom:
                  secretKeyRef:
                    name: bcwat-flowworks-credentials
                    key: BCWAT_FLOWWORKS_PASSWORD
              - name: AIRFLOW__EMAIL__EMAIL_BACKEND
                value: airflow.providers.sendgrid.utils.emailer.send_email
              - name: AIRFLOW__EMAIL__EMAIL_CONN_ID
                value: sendgrid_default
              - name: SENDGRID_MAIL_FROM
                value: airflow@foundryspatial.com
            resources:
              requests:
                memory: 500Mi
              limits:
                memory: 500Mi
            volumeMounts:
              - mountPath: "/opt/airflow/logs"
                name: logs
              - name: config
                mountPath: "/opt/airflow/airflow.cfg"
                subPath: airflow.cfg
                readOnly: true
              - name: config
                mountPath: "/opt/airflow/config/airflow_local_settings.py"
                subPath: airflow_local_settings.py
                readOnly: true
        restartPolicy: Never
        terminationGracePeriodSeconds: 600
        tolerations: []
        topologySpreadConstraints: []
        serviceAccountName: airflow-worker
        volumes:
          - name: logs
            persistentVolumeClaim:
              claimName: airflow-logs
          - name: config
            configMap:
              name: airflow-config

    medium_task_template.yaml: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: airflow-worker-simple
        labels:
          tier: airflow
          component: worker
          release: airflow
        annotations:
          cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
      spec:
        ttlSecondsAfterFinished: 300
        initContainers: []
        containers:
          - name: base
            image: apache/airflow:2.10.5
            imagePullPolicy: IfNotPresent
            env:
              - name: AIRFLOW__CORE__EXECUTOR
                value: KubernetesExecutor
              - name: AIRFLOW__CORE__FERNET_KEY
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-fernet-key
                    key: fernet-key
              - name: AIRFLOW_HOME
                value: /opt/airflow
              - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-metadata
                    key: connection
              - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-metadata
                    key: connection
              - name: AIRFLOW_CONN_AIRFLOW_DB
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-metadata
                    key: connection
              - name: AIRFLOW__WEBSERVER__SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    name: airflow-webserver-secret-key
                    key: webserver-secret-key
              - name: AIRFLOW__KUBERNETES__LOGS_SERVICE_HOST
                value: airflow-webserver
              - name: AIRFLOW__KUBERNETES__LOGS_SERVICE_PORT
                value: "8793"
              - name: FLOWWORKS_USER
                valueFrom:
                  secretKeyRef:
                    name: bcwat-flowworks-credentials
                    key: BCWAT_FLOWWORKS_USERNAME
              - name: FLOWWORKS_PASS
                valueFrom:
                  secretKeyRef:
                    name: bcwat-flowworks-credentials
                    key: BCWAT_FLOWWORKS_PASSWORD
              - name: AIRFLOW__EMAIL__EMAIL_BACKEND
                value: airflow.providers.sendgrid.utils.emailer.send_email
              - name: AIRFLOW__EMAIL__EMAIL_CONN_ID
                value: sendgrid_default
              - name: SENDGRID_MAIL_FROM
                value: airflow@foundryspatial.com
            resources:
              requests:
                memory: 2048Mi
              limits:
                memory: 2048Mi
            volumeMounts:
              - mountPath: "/opt/airflow/logs"
                name: logs
              - name: config
                mountPath: "/opt/airflow/airflow.cfg"
                subPath: airflow.cfg
                readOnly: true
              - name: config
                mountPath: "/opt/airflow/config/airflow_local_settings.py"
                subPath: airflow_local_settings.py
                readOnly: true
        restartPolicy: Never
        terminationGracePeriodSeconds: 600
        tolerations: []
        topologySpreadConstraints: []
        serviceAccountName: airflow-worker
        volumes:
          - name: logs
            persistentVolumeClaim:
              claimName: airflow-logs
          - name: config
            configMap:
              name: airflow-config

    heavy_task_template.yaml: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: airflow-worker-simple
        labels:
          tier: airflow
          component: worker
          release: airflow
        annotations:
          cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
      spec:
        ttlSecondsAfterFinished: 300
        initContainers: []
        containers:
          - name: base
            image: apache/airflow:2.10.5
            imagePullPolicy: IfNotPresent
            env:
              - name: AIRFLOW__CORE__EXECUTOR
                value: KubernetesExecutor
              - name: AIRFLOW__CORE__FERNET_KEY
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-fernet-key
                    key: fernet-key
              - name: AIRFLOW_HOME
                value: /opt/airflow
              - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-metadata
                    key: connection
              - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-metadata
                    key: connection
              - name: AIRFLOW_CONN_AIRFLOW_DB
                valueFrom:
                  secretKeyRef:
                    name: bcwat-airflow-metadata
                    key: connection
              - name: AIRFLOW__WEBSERVER__SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    name: airflow-webserver-secret-key
                    key: webserver-secret-key
              - name: AIRFLOW__KUBERNETES__LOGS_SERVICE_HOST
                value: airflow-webserver
              - name: AIRFLOW__KUBERNETES__LOGS_SERVICE_PORT
                value: "8793"
              - name: FLOWWORKS_USER
                valueFrom:
                  secretKeyRef:
                    name: bcwat-flowworks-credentials
                    key: BCWAT_FLOWWORKS_USERNAME
              - name: FLOWWORKS_PASS
                valueFrom:
                  secretKeyRef:
                    name: bcwat-flowworks-credentials
                    key: BCWAT_FLOWWORKS_PASSWORD
              - name: AIRFLOW__EMAIL__EMAIL_BACKEND
                value: airflow.providers.sendgrid.utils.emailer.send_email
              - name: AIRFLOW__EMAIL__EMAIL_CONN_ID
                value: sendgrid_default
              - name: SENDGRID_MAIL_FROM
                value: airflow@foundryspatial.com
            resources:
              requests:
                memory: 4096Mi
              limits:
                memory: 4096Mi
            volumeMounts:
              - mountPath: "/opt/airflow/logs"
                name: logs
              - name: config
                mountPath: "/opt/airflow/airflow.cfg"
                subPath: airflow.cfg
                readOnly: true
              - name: config
                mountPath: "/opt/airflow/config/airflow_local_settings.py"
                subPath: airflow_local_settings.py
                readOnly: true
              - name: data
                mountPath: "/opt/airflow/data"
                readOnly: false
        restartPolicy: Never
        terminationGracePeriodSeconds: 600
        tolerations: []
        topologySpreadConstraints: []
        serviceAccountName: airflow-worker
        volumes:
          - name: logs
            persistentVolumeClaim:
              claimName: airflow-logs
          - name: config
            configMap:
              name: airflow-config
          - name: data
            persistentVolumeClaim:
              claimName: airflow-data

extraVolumes:
  - name: pod-templates
    configMap:
      name: airflow-pod-templates

extraVolumeMounts:
  - name: pod-templates
    mountPath: /opt/airflow/pod_templates
    readOnly: true

